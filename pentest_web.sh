#!/bin/bash

# Este script automatiza un pentesting básico para tu sitio web
# ¡Úsalo SOLAMENTE en tus propias propiedades y con pleno conocimiento de los riesgos!

# --- Configuración ---
TARGET_URL="https://www.istlatroncal.edu.ec" # <--- ¡CAMBIA ESTA LÍNEA CON LA URL DE TU WEB!
OUTPUT_DIR="pentest_results_$(date +%Y%m%d_%H%M%S)"
WORDLIST_COMMON="/usr/share/wordlists/dirb/common.txt" # Ruta a una wordlist común de dirb
# Para WPScan, necesitarás una API Key gratuita de WPScan para escanear plugins y temas.
# Registra una aquí: https://wpscan.com/wordpress-security-scanner
WPSCAN_API_TOKEN="QryZXc2e0zahULdHrtHxzyYkj59kUxLQ" # <--- ¡CAMBIA ESTA LÍNEA SI USAS WPSCAN!

# --- Colores para la salida ---
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Funciones ---
check_tool() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}[ERROR] La herramienta '$1' no está instalada o no está en el PATH.${NC}"
        echo -e "${YELLOW}Por favor, instálala o verifica tu configuración de Kali Linux.${NC}"
        exit 1
    fi
}

create_output_dir() {
    mkdir -p "$OUTPUT_DIR"
    if [ $? -ne 0 ]; then
        echo -e "${RED}[ERROR] No se pudo crear el directorio de salida: $OUTPUT_DIR.${NC}"
        exit 1
    fi
    echo -e "${GREEN}[INFO] Los resultados se guardarán en: $OUTPUT_DIR${NC}"
}

run_command() {
    local command_desc=$1
    local command_to_run=$2
    local output_file=$3

    echo -e "${YELLOW}--- Ejecutando: $command_desc ---${NC}"
    echo "$command_to_run" > "${OUTPUT_DIR}/${output_file}.command" # Guarda el comando ejecutado
    eval "$command_to_run" 2>&1 | tee "${OUTPUT_DIR}/${output_file}.txt"
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo -e "${RED}[ERROR] Falló la ejecución de '$command_desc'. Revisa el archivo ${output_file}.txt para más detalles.${NC}"
    else
        echo -e "${GREEN}[ÉXITO] '$command_desc' completado. Resultados en ${output_file}.txt${NC}"
    fi
    echo ""
}

# --- Chequeo inicial de herramientas ---
echo -e "${YELLOW}--- Verificando herramientas necesarias ---${NC}"
check_tool "nmap"
check_tool "dig"
check_tool "whois"
check_tool "whatweb"
check_tool "nikto"
check_tool "gobuster"
check_tool "sqlmap"
check_tool "owasp-zap" # OWASP ZAP CLI
# check_tool "wpscan" # Opcional: solo si usas WordPress
echo -e "${GREEN}Todas las herramientas básicas verificadas.${NC}"
echo ""

# --- Preparación ---
create_output_dir

echo -e "${YELLOW}--- Iniciando Pentesting Automatizado para ${TARGET_URL} ---${NC}"
echo "La hora actual es: $(date)"
echo "Target URL: ${TARGET_URL}"
echo "Directorio de salida: ${OUTPUT_DIR}"
echo ""

# --- Fase 1: Reconocimiento ---
echo -e "${GREEN}## Fase 1: Reconocimiento (Footprinting y Fingerprinting) ##${NC}"
echo "---"

# 1. Información de Dominio y DNS
run_command "Whois" "whois ${TARGET_URL#*://}" "01_whois"
run_command "Consulta DNS (A, MX, NS)" "dig ${TARGET_URL#*://} A MX NS" "02_dig_dns"
run_command "Consulta TXT DNS" "dig ${TARGET_URL#*://} TXT" "03_dig_txt"

# 2. Escaneo de Puertos y Servicios (Nmap)
# Solo escaneamos el dominio, Nmap se encargará de resolver la IP
NMAP_TARGET="${TARGET_URL#*://}" # Elimina http:// o https://
run_command "Nmap - Escaneo de Puertos y Servicios (-sV)" "nmap -sV ${NMAP_TARGET}" "04_nmap_sv"
run_command "Nmap - Escaneo de Vulnerabilidades comunes (--script vuln)" "nmap --script vuln ${NMAP_TARGET}" "05_nmap_vuln_script"

# 3. Identificación de Tecnologías (Fingerprinting Web)
run_command "WhatWeb" "whatweb ${TARGET_URL}" "06_whatweb"
run_command "Nikto - Escaneo de Servidor Web" "nikto -h ${TARGET_URL}" "07_nikto"

# 4. Enumeración de Subdominios (Amass)
# Amass es potente, pero puede tardar. Se ejecuta solo si está instalado.
if command -v "amass" &> /dev/null; then
    run_command "Amass - Enumeración de Subdominios" "amass enum -d ${TARGET_URL#*://}" "08_amass_subdomains"
else
    echo -e "${YELLOW}[SKIP] Amass no encontrado. Omitting sub-domain enumeration.${NC}"
fi

# 5. Descubrimiento de Contenido (Gobuster)
if [ -f "$WORDLIST_COMMON" ]; then
    run_command "Gobuster - Descubrimiento de Directorios y Archivos" "gobuster dir -u ${TARGET_URL} -w ${WORDLIST_COMMON} -o ${OUTPUT_DIR}/09_gobuster_dir.txt" "09_gobuster_dir"
else
    echo -e "${RED}[ERROR] Wordlist común de Gobuster no encontrada en ${WORDLIST_COMMON}. Omitting directory brute-forcing.${NC}"
fi

echo ""

# --- Fase 2: Escaneo de Vulnerabilidades ---
echo -e "${GREEN}## Fase 2: Escaneo de Vulnerabilidades ##${NC}"
echo "---"

# 1. OWASP ZAP - Escaneo Automatizado
echo -e "${YELLOW}--- Ejecutando OWASP ZAP (Escaneo Automatizado) ---${NC}"
# Inicia ZAP en modo demonio y realiza un escaneo. Esto puede tardar bastante.
# Asegúrate de que ZAP está configurado correctamente o de que la CLI funciona.
# Puedes necesitar ajustar los parámetros de la API de ZAP si no se conecta.
# Este comando puede variar dependiendo de tu instalación de ZAP CLI.
# Una forma más robusta sería usar 'zap-cli' si lo tienes instalado.
# zap-cli quick-scan -s xss,sqli -r ${TARGET_URL}
# Para una ejecución más simple con el binario:
ZAP_CMD="owasp-zap -cmd -quickurl ${TARGET_URL} -quickprogress -port 8080 -host 127.0.0.1 -config api.disablekey=true"
echo -e "${YELLOW}Este escaneo de ZAP puede tardar varios minutos...${NC}"
$ZAP_CMD 2>&1 | tee "${OUTPUT_DIR}/10_owasp_zap_scan.txt"
if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo -e "${RED}[ERROR] OWASP ZAP Quick Scan falló. Verifica la instalación de ZAP y si el target es accesible.${NC}"
else
    echo -e "${GREEN}[ÉXITO] OWASP ZAP Quick Scan completado. Resultados en 10_owasp_zap_scan.txt${NC}"
fi
echo ""

# 2. SQLMap (Intentando detectar puntos de inyección)
# SQLMap requiere un punto de entrada inyectable (parámetro GET/POST).
# Este script solo realiza una prueba muy básica asumiendo un parámetro 'id'.
# Necesitarías adaptar esto a tu URL específica.
if [[ "$TARGET_URL" == *"?"* ]]; then # Comprueba si la URL ya tiene parámetros
    run_command "SQLMap - Detección de Inyección SQL (Básico)" "sqlmap -u \"${TARGET_URL}\" --batch --crawl=1 --random-agent --risk=1 --level=1" "11_sqlmap_basic"
else
    echo -e "${YELLOW}[SKIP] La URL no parece tener parámetros GET. SQLMap requiere un punto de entrada (por ejemplo, ?id=1). Omitting SQLMap.${NC}"
    echo -e "${YELLOW}Para usar SQLMap, necesitarías identificar un parámetro vulnerable, por ejemplo: ${TARGET_URL}/page.php?id=1${NC}"
fi

# 3. WPScan (Si es un sitio WordPress)
# Para que WPScan funcione bien, se recomienda obtener una API key gratuita de WPScan.com
if [[ "$TARGET_URL" == *"wordpress"* ]] || [[ "$TARGET_URL" == *"wp-admin"* ]] || [[ "$TARGET_URL" == *"wp-login.php"* ]]; then
    if command -v "wpscan" &> /dev/null; then
        if [ "$WPSCAN_API_TOKEN" != "TU_API_KEY_DE_WPSCAN" ] && [ -n "$WPSCAN_API_TOKEN" ]; then
            run_command "WPScan - Escaneo de WordPress" "wpscan --url ${TARGET_URL} --enumerate p,t,u --api-token ${WPSCAN_API_TOKEN}" "12_wpscan"
        else
            run_command "WPScan - Escaneo de WordPress (sin API key - limitado)" "wpscan --url ${TARGET_URL} --enumerate p,t,u" "12_wpscan_no_api"
            echo -e "${YELLOW}Considera añadir tu API Key de WPScan en el script para resultados más completos.${NC}"
        fi
    else
        echo -e "${YELLOW}[SKIP] WPScan no encontrado. Omitting WordPress scan.${NC}"
    fi
else
    echo -e "${YELLOW}[SKIP] La URL no parece ser un sitio WordPress. Omitting WPScan.${NC}"
fi

echo ""

# --- Finalización ---
echo -e "${GREEN}## Pentesting Automatizado Completado ##${NC}"
echo "Todos los resultados y logs están en el directorio: ${OUTPUT_DIR}"
echo "Por favor, revisa cuidadosamente los archivos .txt para identificar posibles vulnerabilidades."
echo "La hora de finalización es: $(date)"
echo -e "${NC}"

echo "Recuerda que este script es solo el inicio. Un análisis manual es crucial para identificar vulnerabilidades complejas."
echo "¡Ahora, a analizar los resultados y fortificar tu web!"
